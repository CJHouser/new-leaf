const Routines = require("../routines.js");
const BadWords = require("bad-words");

class Cleaner {
  /**
   * Each instance handles a single clean execution from a user.
   * cleanCalls tracks the number of recursive calls generated by the
   * request in order to determine when the cleaning is complete.
   * @param {Message} initialMessage The message where cleaning begins.
   */
  constructor(initialMessage) {
    this.rules = new BadWords();
    this.initialMessage = initialMessage;
    this.cleanCalls = 0;
    this.options = {limit: 100};
  }

  start() { this.clean(this.initialMessage) }

  async clean(precedingMessage) {
    if (Routines.badObject(precedingMessage)) return;
    this.options.before = precedingMessage.id;
    this.cleanCalls++;
    try {
      let messages = await precedingMessage.channel.messages.fetch(this.options);
      this.clean(messages.last());
      messages.filter(m => this.rules.isProfane(m.content)).forEach(m => m.delete());
    }
    catch (err) {
      console.log(err);
    }
    if (--this.cleanCalls == 0) this.initialMessage.reply("Cleaning finished");
  }
}

module.exports = Cleaner;
