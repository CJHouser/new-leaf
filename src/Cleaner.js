const Filter = require("bad-words");
let filter = new Filter();

class Cleaner {
  /**
   * Each instance handles a single clean execution from a user.
   * cleanCalls tracks the number of recursive calls generated by the
   * request in order to determine when the cleaning is complete.
   * @param {Message} commandMessage The message where cleaning begins.
   */
  constructor(initialMessage) {
    this.cleanCalls = 0;
    this.options = {limit: 100};
    this.clean(initialMessage);
  }

  async clean(precedingMessage) {
    if (!precedingMessage || Object.keys(precedingMessage).length === 0) return;
    this.options.before = precedingMessage.id;
    this.cleanCalls++;
    try {
      var messages = await precedingMessage.channel.messages.fetch(this.options);
      this.clean(messages.last());
      messages.filter(m => filter.isProfane(m.content)).forEach(m => m.delete());
    }
    catch (err) {
      console.log(err);
    }
    if (--this.cleanCalls == 0) {
      console.log("Cleaning finished");
      precedingMessage.channel.send("Cleaning finished");
    }
  }
}

module.exports = Cleaner;
